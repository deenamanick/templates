namespace: /ethereum

common:
  metadata:
    defines: metadata
    name: Ethereum
    description: Ethereum is a global, decentralized platform for money and new kinds of applications. On Ethereum, you can write code that controls money, and build applications accessible anywhere in the world.
    tags: blockchain
    currency: ETH
    icon: https://assets.monk.io/icons/1200px-Ethereum-icon-purple.svg.png
    website: https://www.ethereum.org/
    source: https://github.com/ethereum
    publisher: "monk.io"
    white-paper: https://github.com/ethereum/wiki/wiki/White-Paper
    twitter: https://twitter.com/ethereum
    facebook: https://www.facebook.com/ethereumproject/
    reddit: https://www.reddit.com/r/ethereum/
    network-name: "mainnet"
    node-type: "full"
    consensus-type: "Proof of Work"

  requirements:
    defines: requirements
    CPU: "2 Cores"
    RAM: 4096
    GPU: true
    disk: 512000

  containers:
    defines: containers
    ethereum-node:
      image: docker.io/ethereum/client-go
      ports:
        - <- `${host}:${p2p-port}:${p2p-port}/udp`
        - <- `0.0.0.0:${rpc-port}:${rpc-port}/tcp`
      paths:
        - <- `${volume}:${internal-volume}`
      entrypoint: <- `${entrypoint}`
      bash: <- `${bash}`

  variables:
    defines: variables

    p2p-port:
      type: int
      value: 30303

    rpc-port:
      type: int
      value: 8545

    host:
      type: string
      value: "0.0.0.0"

    volume:
      type: string
      value: <- `${moncc-volume-path}/ethereum`

    internal-volume:
      type: string
      value: "/root/.ethereum"

    network:
      type: string
      value: ""

    syncmode:
      type: string
      value: full

    # ERROR[11-29|17:52:34.383] Unavailable modules in HTTP API list     unavailable="[\"eth txpool\"]" available="[admin debug web3 eth txpool personal ethash miner net]"
    entrypoint:
      type: string
      value: <- `geth --syncmode ${syncmode} ${network} --rpc --rpccorsdomain="*" --rpcaddr 0.0.0.0 --rpcapi "eth,net,web3,txpool"`

    bash:
      type: string
      value: ""

    deposit-contract:
      type: string
      value: ""

mainnet-full:
  defines: runnable
  inherits: ./latest

mainnet-light:
  defines: runnable
  inherits: ./latest
  metadata:
    node-type: "light"
  requirements:
    disk: 400
  variables:
    syncmode:
      type: string
      value: light
  actions:
    defines: actions
    health:
      description: Check health
      arguments: {}
      code: exec("ethereum-node", "/bin/bash", "-c", `health_http_code=$(curl --write-out "%{http_code}" --silent --output /dev/null http://localhost:8545/); if [[ "$health_http_code" -ne 200 ]] ; then echo "false"; else echo "true"; fi`)

mainnet-fast:
  defines: runnable
  inherits: ./latest
  metadata:
    node-type: "fast"
  requirements:
    disk: 150000
  variables:
    syncmode:
      type: string
      value: fast

testnet-full:
  defines: runnable
  inherits: ./latest
  metadata:
    network-name: "testnet"
    node-type: "full"
  variables:
    network:
      value: --testnet

testnet-light:
  defines: runnable
  inherits: ./latest
  metadata:
    network-name: "testnet"
    node-type: "light"
  variables:
    network:
      value: --testnet
    syncmode:
      type: string
      value: light

testnet-fast:
  defines: runnable
  inherits: ./latest
  metadata:
    network-name: "testnet"
    node-type: "fast"
  variables:
    network:
      value: --testnet
    syncmode:
      type: string
      value: fast

rinkeby-full:
  defines: runnable
  inherits: ./latest
  metadata:
    network-name: "rinkeby"
    node-type: "full"
    consensus-type: "Proof of Authority"
  variables:
    network:
      value: --rinkeby

rinkeby-light:
  defines: runnable
  inherits: ./latest
  metadata:
    network-name: "rinkeby"
    node-type: "light"
    consensus-type: "Proof of Authority"
  variables:
    network:
      value: --rinkeby
    syncmode:
      type: string
      value: light

rinkeby-fast:
  defines: runnable
  inherits: ./latest
  metadata:
    network-name: "rinkeby"
    node-type: "fast"
    consensus-type: "Proof of Authority"
  variables:
    network:
      value: --rinkeby
    syncmode:
      type: string
      value: fast

rinkeby-embedded:
  defines: runnable
  inherits: ./latest
  metadata:
    network-name: "rinkeby"
    node-type: "embedded"
    consensus-type: "Proof of Authority"
  variables:
    volume:
      value: <- `${moncc-volume-path}/ethereum_rinkeby_embedded`
    internal-volume:
      value: "/root/.rinkeby"
    uniq-node-name:
      type: string
      value: ""
      ask: true
      description: "Unique node name for network"
    bash:
      value: <- `wget -O rinkeby.json https://www.rinkeby.io/rinkeby.json && geth --datadir=/root/.rinkeby init rinkeby.json && geth --networkid=4 --datadir=/root/.rinkeby --cache=16 --ethash.cachesinmem=1 --syncmode=light --ethstats='${uniq-node-name}:Respect my authoritah!@stats.rinkeby.io' --bootnodes=enode://a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf@52.169.42.101:30303 --rpc --rpcaddr 0.0.0.0`

serenity:
  defines: runnable
  inherits: ./common
  metadata:
    network-name: "serenity testnet"
    node-type: "embedded"
    consensus-type: "Proof of Stake"
  version: latest
  containers:
    ethereum-node:
      image-tag: latest
      image: gcr.io/prysmaticlabs/prysm/beacon-chain
      ports:
        - <- `${host}:${p2p-port}:12000`
        - <- `0.0.0.0:${rpc-port}:4000`
      paths:
        - <- `${volume}:/data`
      bash: ""
      entrypoint: "/app/beacon-chain/image.binary --datadir=/data"
  variables:
    volume:
      value: <- `${moncc-volume-path}/ethereum-serenity`

parity:
  defines: runnable
  inherits: ./common
  metadata:
    network-name: "parity mainnet"
    node-type: "full"
    consensus-type: "Proof of Work"
  version: v2.5.9
  containers:
    ethereum-node:
      image-tag: v2.5.9-stable
      image: docker.io/parity/parity
      ports:
        - <- `0.0.0.0:${rpc-port}:8545`
        - <- `${host}:${p2p-port}:30303`
      entrypoint: ""
      user: root
      bash: <- `chown parity:parity /home/parity/.local/share/io.parity.ethereum; su parity -c "/bin/parity --jsonrpc-apis=safe,personal --jsonrpc-interface=all"`
  variables:
    volume:
      value: <- `${moncc-volume-path}/parity-ethereum`
    internal-volume:
      value: /home/parity/.local/share/io.parity.ethereum

parity-light:
  defines: runnable
  inherits: ./parity
  metadata:
    node-type: "light"
  containers:
    ethereum-node:
      bash: <- `chown parity:parity /home/parity/.local/share/io.parity.ethereum; su parity -c "/bin/parity --light --jsonrpc-apis=safe,personal --jsonrpc-interface=all"`

latest:
  defines: runnable
  inherits: ./v1.9.25

v1.9.25:
  defines: runnable
  inherits: ./common
  version: v1.9.25
  containers:
    ethereum-node:
      image-tag: v1.9.25

v1.9.24:
  defines: runnable
  inherits: ./common
  version: v1.9.24
  containers:
    ethereum-node:
      image-tag: v1.9.24

v1.9.13:
  defines: runnable
  inherits: ./common
  version: v1.9.13
  containers:
    ethereum-node:
      image-tag: v1.9.13

v1.9.5:
  defines: runnable
  inherits: ./common
  version: v1.9.5
  containers:
    ethereum-node:
      image-tag: v1.9.5

v1.8.23:
  defines: runnable
  inherits: ./common
  version: v1.8.23
  containers:
    ethereum-node:
      image-tag: v1.8.23
